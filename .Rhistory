knitr::opts_chunk$set(echo = TRUE)
library(filesstrings)
install.packages("filesstrings")
library(filesstrings)
file.create("new_file.rmd")
# https://stat.ethz.ch/R-manual/R-devel/library/base/html/unlink.html
dir.create(here("created_directory"))
library(here)
# https://stat.ethz.ch/R-manual/R-devel/library/base/html/unlink.html
dir.create(here("created_directory"))
# https://theautomatic.net/2018/07/11/manipulate-files-r/
file.move(here("new_file.rmd"), here("created_directory"))
knitr::opts_chunk$set(echo = TRUE)
con <- DBI::dbConnect(duckdb::duckdb())
library(duckdb)
install.packages(duckdb)
install.packages("duckdb")
library(here)
library(tidyverse)
library(DBI) # low-level database interface to connect to databases
library(dbplyr)# translates your dplyr code to SQL queries
library(duckdb)
# install.packages("duckdb")
knitr::opts_chunk$set(echo = FALSE)
con <- DBI::dbConnect(duckdb::duckdb())
View(con)
# to add data: DBI::dbWriteTable();
# 3 arguments: a database connection (con), the name fo the table to create in the database ("mpg"), and a dataframe of data
dbWriteTable(con, "mpg", ggplot2::mpg)
# to check if a table exists, use dbListTables()
dbListTables(con)
library(here)
library(tidyverse)
library(DBI) # low-level database interface to connect to databases
library(dbplyr)# translates your dplyr code to SQL queries
library(duckdb)
# install.packages("duckdb")
# to add data: DBI::dbWriteTable();
# 3 arguments: a database connection (con), the name fo the table to create in the database ("mpg"), and a dataframe of data
dbWriteTable(con, "mpg", ggplot2::mpg)
# Thanks to the magic of DBI, the only difference between using duckdb and any other DBMS is how you’ll connect to the database.
# We're only using duckdb::duckdb() instead of those above for ease of use.
con <- DBI::dbConnect(duckdb::duckdb())
# to add data: DBI::dbWriteTable();
# 3 arguments: a database connection (con), the name fo the table to create in the database ("mpg"), and a dataframe of data
dbWriteTable(con, "mpg", ggplot2::mpg)
# to check if a table exists, use dbListTables()
dbListTables(con)
dbWriteTAbles(con, "diamonds", ggplot2::diamonds)
dbWriteTables(con, "diamonds", ggplot2::diamonds)
dbWriteTable(con, "diamonds", ggplot2::diamonds)
dbWriteTable(con, "mpg", ggplot2::mpg)
dbListTables(con)
# to check if a specific table exists:
dbExistsTable(con, "mpg")
dbExistsTable(con, "palmemrpenguins")
con %>% dbReadTable("mpg") %>% as_tibble()
mpg <- con %>% dbReadTable("mpg") %>% as_tibble()
mpg
dbGetQuery() # takes a database connection and some SQL code and returns a dataframe
# dbGetQuery() # takes a database connection and some SQL code and returns a dataframe
sql <- "
SELECT carat, clarity, price
FROM diamonds
WHERE price > 15000
"
as_tibble(dbGetQuery(con, sql))
con
View(con)
knitr::opts_chunk$set(echo = FALSE)
# dbplyr: is a dplyr backend, which means that you keep writing dplyr code but the backend executes it differently. In this, dbplyr translates to SQL;
# dtplyr: translates to data.table;
# multidplyr: executes your code on multiple cores.
# To use dbplyr, you must first use tbl() to create an object that represents a database table:
diamonds_db <- tbl(con, "diamonds")
library(here)
library(tidyverse)
library(DBI) # low-level database interface to connect to databases
library(dbplyr)# translates your dplyr code to SQL queries
library(duckdb)
# install.packages("duckdb")
# Thanks to the magic of DBI, the only difference between using duckdb and any other DBMS is how you’ll connect to the database.
# We're only using duckdb::duckdb() instead of those above for ease of use.
con <- DBI::dbConnect(duckdb::duckdb())
# Connecting to duckdb is particularly simple because the defaults create a temporary database that is deleted when you quit R
# to add data: DBI::dbWriteTable();
# 3 arguments: a database connection (con), the name fo the table to create in the database ("mpg"), and a dataframe of data
dbWriteTable(con, "mpg", ggplot2::mpg)
dbWriteTable(con, "diamonds", ggplot2::diamonds)
# to check if a specific table exists:
dbExistsTable(con, "mpg") # returns TRUE
dbExistsTable(con, "palmemrpenguins") # returns FALSE
# To use dbplyr, you must first use tbl() to create an object that represents a database table:
diamonds_db <- tbl(con, "diamonds")
View(diamonds_db)
big_diamonds_db <- diamonds_db %>%
filter(price > 15000) %>%
select(carat:clarity, price)
big_diamonds_db %>%
show_query()
big_diamonds <- big_diamonds_db %>%
collect()
big_diamonds
dbplyr::copy_nycflights13(con)
flights <- tbl(con, "flights")
planes <- tbl(con, "planes")
# Top-level components: statements;
# CREATE: defines new tables
# INSERT: adds data
# SELECT: queries (almost exclusively what one will use as a data scientist)
# Queries: made up of clauses;
# Clauses: SELECT, FROM, WHERE, ORDER BY, GROUP BY
# Note: Every query must have the SELECT and FROM clauses;
# Note: Simplest query is SELECT * FROM ___; selects all columns from a specified table (shown as ____).
?where
